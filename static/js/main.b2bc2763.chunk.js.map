{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.jsx","redux/contacts/contacts-operations.jsx","redux/contacts/contacts-reducer.jsx","redux/contacts/contacts-selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/store.jsx","index.js"],"names":["module","exports","changeFilter","createAction","axios","defaults","baseURL","fetchContact","createAsyncThunk","a","pending","get","data","console","log","rejected","addContact","contact","post","deleteContact","id","delete","items","createReducer","fulfilled","_","payload","state","filter","loading","error","action","combineReducers","getFilter","contacts","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","setName","phone","setPhone","useSelector","dispatch","useDispatch","handleChange","event","currentTarget","value","className","styles","onSubmit","preventDefault","map","alert","ContactForm__label","ContactForm__input","type","pattern","title","required","onChange","ContactForm__button","ContactList","loader","useEffect","ContactList__item","ContactList__button","onClick","Filter","Filter__label","Filter__input","e","target","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2bc2763.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1zvAA\",\"ContactForm__label\":\"ContactForm_ContactForm__label__jTzOR\",\"ContactForm__input\":\"ContactForm_ContactForm__input__3onxO\",\"ContactForm__button\":\"ContactForm_ContactForm__button__3V1To\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__4TvGi\",\"ContactList__button\":\"ContactList_ContactList__button__1tJt8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__label\":\"Filter_Filter__label__1zfZ7\",\"Filter__input\":\"Filter_Filter__input__3QdN_\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport { changeFilter };\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://618d5076fe09aa00174406a2.mockapi.io';\n\nconst fetchContact = createAsyncThunk('contacts/fetchContact', async () => {\n  fetchContact.pending();\n  try {\n    const { data } = await axios.get('/contacts');\n    console.log(data);\n    return data;\n  } catch (error) {\n    fetchContact.rejected(error);\n  }\n});\n\nconst addContact = createAsyncThunk('contacts/addContact', async contact => {\n  addContact.pending();\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    console.log(data);\n    return data;\n  } catch (error) {\n    addContact.rejected(error);\n  }\n});\n\nconst deleteContact = createAsyncThunk('contacts/deleteContact', async id => {\n  deleteContact.pending();\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    return id;\n  } catch (error) {\n    deleteContact.rejected(error);\n  }\n});\n\nexport { fetchContact, addContact, deleteContact };\n\n// =====  previous version ===\n// const fetchContact = () => async dispatch => {\n//   dispatch(actions.fetchContactRequest());\n//   console.log(dispatch(actions.fetchContactRequest()));\n\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     dispatch(actions.fetchContactSuccess(data));\n//   } catch (error) {\n//     dispatch(actions.fetchContactError(error));\n//   }\n// };\n\n// const addContact = (name, number) => dispatch => {\n// const contact = {\n//   name,\n//   number,\n//   completed: false,\n// };\n\n//   dispatch(actions.addContactRequest());\n\n//   axios\n//     .post('/contacts', contact)\n//     .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n//     .catch(error => dispatch(actions.addContactError(error)));\n// };\n\n// const deleteContact = id => dispatch => {\n//   dispatch(actions.deleteContactRequest());\n\n//   axios\n//     .delete(`/contacts/${id}`)\n//     .then(() => dispatch(actions.deleteContactSuccess(id)))\n//     .catch(error => dispatch(actions.deleteContactError(error)));\n// };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  fetchContact,\n  addContact,\n  deleteContact,\n  changeFilter,\n} from '../../redux/contacts';\n\nconst items = createReducer([], {\n  [fetchContact.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContact.pending]: () => true,\n  [fetchContact.fulfilled]: () => false,\n  [fetchContact.rejected]: () => false,\n\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {\n  [fetchContact.rejected]: (_, action) => action.payload,\n  [fetchContact.pending]: () => null,\n\n  [addContact.rejected]: (_, action) => action.payload,\n  [addContact.pending]: () => null,\n\n  [deleteContact.rejected]: (_, action) => action.payload,\n  [deleteContact.pending]: () => null,\n});\n\nexport default combineReducers({ items, filter, loading, error });\n","import { createSelector } from 'reselect';\n\nexport const getAllContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nimport { addContact, getVisibleContacts } from '../../redux/contacts';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const searchSameName = contacts.map(contact => contact.name).includes(name);\n\n    if (searchSameName) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name, phone }));\n    }\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form className={styles.ContactForm} onSubmit={handleSubmit}>\n      <label className={styles.ContactForm__label}>\n        Name\n        <input\n          className={styles.ContactForm__input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={styles.ContactForm__label}>\n        Number\n        <input\n          className={styles.ContactForm__input}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={phone}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={styles.ContactForm__button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  handleChange: propTypes.func,\n  handleSubmit: propTypes.func,\n  name: propTypes.string,\n  phone: propTypes.string,\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nimport {\n  fetchContact,\n  deleteContact,\n  getVisibleContacts,\n  getLoading,\n} from '../../redux/contacts';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const loader = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  return (\n    !loader && <h1>Загружается...</h1> &&\n    contacts && (\n      <ul className={styles.ContactList}>\n        {contacts.map(contact => (\n          <li className={styles.ContactList__item} key={contact.id}>\n            {contact.name + ': ' + contact.phone}\n            <button\n              type=\"button\"\n              className={styles.ContactList__button}\n              name=\"delete\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    )\n  );\n}\n\nContactList.propTypes = {\n  onDeleteContact: propTypes.func,\n  contacts: propTypes.arrayOf(propTypes.object),\n  contact: propTypes.shape({\n    id: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    phone: propTypes.string.isRequired,\n  }),\n};\n\n// =====  previous version ===\n\n// const mapStatetoProps = state => ({\n//   isLoadingContacts: state.contacts.loading,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchContacts: () => dispatch(fetchContact()),\n// });\n\n// export default connect(mapStatetoProps, mapDispatchToProps)(ContactList);\n","import { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nimport { getFilter, changeFilter } from '../../redux/contacts';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label className={styles.Filter__label}>\n        Find contacts by name\n        <input\n          className={styles.Filter__input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={value}\n          onChange={e => dispatch(changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: propTypes.string,\n  onChangeFilter: propTypes.func,\n};\n\nexport default Filter;\n","import './App.css';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { getDefaultMiddleware, configureStore } from '@reduxjs/toolkit';\n// import logger from 'redux-logger';\n\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}