{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.jsx","redux/contacts/contacts-selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.jsx","redux/store.jsx","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getFilter","state","contacts","filter","getVisibleContacts","items","normalizedFilter","toLowerCase","contact","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","event","currentTarget","value","className","styles","onSubmit","preventDefault","map","alert","ContactForm__label","ContactForm__input","type","pattern","title","required","onChange","ContactForm__button","ContactList","ContactList__item","ContactList__button","onClick","Filter","Filter__label","Filter__input","e","target","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c51c04f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__4TvGi\",\"ContactList__button\":\"ContactList_ContactList__button__1tJt8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter__label\":\"Filter_Filter__label__1zfZ7\",\"Filter__input\":\"Filter_Filter__input__3QdN_\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: { id: uuidv4(), name, number },\n}));\n\nconst deleteContact = createAction('contacts/delete');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport { addContact, deleteContact, changeFilter };\n","export const getFilter = state => state.contacts.filter;\nexport const getVisibleContacts = ({ contacts: { items, filter } }) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return items.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const searchSameName = contacts.map(contact => contact.name).includes(name);\n\n    if (searchSameName) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(name, number));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.ContactForm} onSubmit={handleSubmit}>\n      <label className={styles.ContactForm__label}>\n        Name\n        <input\n          className={styles.ContactForm__input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={styles.ContactForm__label}>\n        Number\n        <input\n          className={styles.ContactForm__input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={styles.ContactForm__button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  handleChange: propTypes.func,\n  handleSubmit: propTypes.func,\n  name: propTypes.string,\n  number: propTypes.string,\n};\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={styles.ContactList}>\n      {contacts.map(contact => (\n        <li className={styles.ContactList__item} key={contact.id}>\n          {contact.name + ': ' + contact.number}\n          <button\n            type=\"button\"\n            className={styles.ContactList__button}\n            name=\"delete\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  onDeleteContact: propTypes.func,\n  contacts: propTypes.arrayOf(propTypes.object),\n  contact: propTypes.shape({\n    id: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    number: propTypes.string.isRequired,\n  }),\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label className={styles.Filter__label}>\n        Find contacts by name\n        <input\n          className={styles.Filter__input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={value}\n          onChange={e => dispatch(changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: propTypes.string,\n  onChangeFilter: propTypes.func,\n};\n\nexport default Filter;\n","import './App.css';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\n\nconst defaultContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer(defaultContacts, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n","import {\n  getDefaultMiddleware,\n  configureStore,\n  // combineReducers,\n} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport contactsReducer from './contacts/contacts-reducer';\n\n// const persistConfig = {\n//   key: 'contacts-list',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1zvAA\",\"ContactForm__label\":\"ContactForm_ContactForm__label__jTzOR\",\"ContactForm__input\":\"ContactForm_ContactForm__input__3onxO\",\"ContactForm__button\":\"ContactForm_ContactForm__button__3V1To\"};"],"sourceRoot":""}